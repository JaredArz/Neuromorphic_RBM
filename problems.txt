# Archive of problems mapped to weight matrices



#### INDEPENDENT SET

#Example Graph:
#           0---3
#              /|
#             1-2---4

#Solution is 11001 = 25
Edges = np.array([[-10,-1,-1,10,-1], #Connections of node 0
                  [-1,-10,10,10,-1], #Connections of node 1
                  [-1,10,-10,10,10], #Connections of node 2
                  [10,10,10,-10,-1], #Connections of node 3
                  [-1,-1,10,-1,-10]]) #Connections of node 4        
#Example Graph:
#            0
#           / \
#          1   2 
#         /\   /\
#        /  \ /  \  
#        \   4   /
#         \ / \ /
#          3   5


#Solution is 100101 = 37
Edges = np.array([[-10,10,10,-1,-1,-1], #Connections of node 0
                  [10,-10,-1,10,10,-1], #Connections of node 1
                  [10,-1,-10,-1,10,10], #Connections of node 2
                  [-1,10,-1,-10,10,-1], #Connections of node 3
                  [-1,10,10,10,-10,10], #Connections of node 4
                  [-1,-1,10,-1,10,-10]]) #Connections of node 5         
#Example Graph:
#            0----1
#            |    |
#            3----2

#Solution is 1010/0101 = 10/5
Edges = np.array([[-10,10,-1,10], #Connections of node 0
                  [10,-10,10,-1], #Connections of node 1
                  [-1,10,-10,10], #Connections of node 2
                  [10,-1,10,-10]]) #Connections of node 3        







##### MAXCUT

#Example Graph:
#         O---------3
#        / \         \        
#       1---\---------4
#        \   \       /
#         ----2------

#Solution is 10001/01110 = 17/14
Edges = np.array([[10,-1,-1,-1,10], #Connections of node 0
                  [-1,10,-1,10,-1], #Connections of node 1
                  [-1,-1,10,10,-1], #Connections of node 2
                  [-1,10,10,10,-1], #Connections of node 3
                  [10,-1,-1,-1,10]]) #Connections of node 4


#Example Graph:
#         O---3
#        /|   |    
#       1 |   |
#        \|   |
#         2---4

#Solutions are 10001/01110 = 17/14 and 00110/11001 = 6/25
Edges = np.array([[10,-1,-1,-1,10], #Connections of node 0
                  [-1,10,-1,10,10], #Connections of node 1
                  [-1,-1,10,10,-1], #Connections of node 2
                  [-1,10,10,10,-1], #Connections of node 3
                  [10,10,-1,-1,10]]) #Connections of node 4

#Example Graph:
#  0  1
#  |/\|
#  2  3     
#  |/\|
#  4  5

#Solution is 110011/001100 = 51/12
Edges = np.array([[10,10,-1,-1,10,10], #Connections of node 0
                  [10,10,-1,-1,10,10], #Connections of node 1
                  [-1,-1,10,10,-1,-1], #Connections of node 2
                  [-1,-1,10,10,-1,-1], #Connections of node 3
                  [10,10,-1,-1,10,10], #Connections of node 4
                  [10,10,-1,-1,10,10]]) #Connections of node 5









##### MAX SAT

# boolean clauses: (X||Y||Z) & (X'||Y||Z) & (X'||Y'||Z) & (X||Y'||Z') & (X'||Y||Z')
# soln: 21/010101 28/011100
Edges = np.array([[-5, -1, -1, 10, -1, -1], 
                  [-1, -7, -2, -2, 10, -1],
                  [-1, -2, -7, -2, -1, 10], 
                  [10, -2, -2, -7, -1, -1],
                  [-1, 10, -1, -1, -5, -1], 
                  [-1, -1, 10, -1, -1, -5]])
